name: CI Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run linting
        run: |
          uv run ruff check src/backend tests/backend
          uv run ruff format --check src/backend tests/backend

      - name: Run backend tests with coverage
        run: |
          uv run pytest tests/backend/unit -v --cov=src/backend --cov-report=xml --cov-report=html --cov-report=term
        env:
          PYTHONPATH: ${{ github.workspace }}/src

      - name: Upload Python coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: backend
          name: backend-coverage-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ matrix.python-version }}
          path: |
            coverage.xml
            coverage.json
            htmlcov/

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: src/frontend
        run: npm ci

      - name: Run linting
        working-directory: src/frontend
        run: npm run lint

      - name: Run frontend tests with coverage
        working-directory: src/frontend
        run: npm run test:coverage

      - name: Upload TypeScript coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./src/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            src/frontend/coverage/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Run integration tests
        run: |
          uv run pytest tests/backend/integration -v -n auto
        env:
          PYTHONPATH: ${{ github.workspace }}/src
          TEST_DB: ":memory:"

      - name: Run SITL tests
        run: |
          uv run pytest tests/backend/sitl -v --maxfail=3
        env:
          PYTHONPATH: ${{ github.workspace }}/src
          SITL_MODE: "sim"

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build frontend
        working-directory: src/frontend
        run: |
          npm ci
          npm run build

      - name: Start backend server
        run: |
          uv sync --all-extras --dev
          uv run uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
        env:
          PYTHONPATH: ${{ github.workspace }}/src

      - name: Run E2E tests
        working-directory: tests/e2e
        run: |
          npm install
          npx playwright test --reporter=html

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: tests/e2e/playwright-report/

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*-coverage*'
          merge-multiple: true

      - name: Generate combined coverage badge
        run: |
          echo "Coverage reports have been uploaded to Codecov and artifacts"

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Coverage Report\n\nCoverage reports have been generated and uploaded:\n- Backend Coverage: See artifacts\n- Frontend Coverage: See artifacts\n- View detailed reports in Codecov dashboard'
            })
